{"version":3,"file":"qunit-current-url-dist.js","sources":["../lib/qunit-current-url.js"],"sourcesContent":["/* eslint-disable no-undef */\n\nfunction extraUrlInfo(urlString) {\n  const [baseUrl, queryParamsString = ''] = urlString.split('?');\n  const queryParamsPairs = queryParamsString.split('&');\n  const queryParameters = {};\n  queryParamsPairs.forEach((pair) => {\n    const [key, value] = pair.split('=');\n    // If there are no QP's we don't want to push \"\": undefined\n    if (key) {\n      queryParameters[key] = value;\n    }\n  });\n  return {\n    baseUrl,\n    queryParameters,\n  };\n}\n\n  function equals(expectedUrl, expectedQueryParams) {\n    const { currentURL }  = require('@ember/test-helpers');\n    const currentUrlString = currentURL();\n    const currentUrlInfo = extraUrlInfo(currentUrlString);\n    if (expectedQueryParams) {\n      const expectedUrlInfo = extraUrlInfo(expectedUrl);\n      QUnit.assert.equal(\n        currentUrlInfo.baseUrl,\n        expectedUrlInfo.baseUrl,\n        'Expected base URL to be the same'\n      );\n      QUnit.assert.deepEqual(\n        currentUrlInfo.queryParameters,\n        expectedQueryParams,\n        'Expected query parameters to be the same'\n      );\n    } else {\n      const expectedUrlInfo = extraUrlInfo(expectedUrl);\n      QUnit.assert.equal(\n        currentUrlInfo.baseUrl,\n        expectedUrlInfo.baseUrl,\n        'Expected base URL to be the same'\n      );\n      QUnit.assert.deepEqual(\n        currentUrlInfo.queryParameters,\n        expectedUrlInfo.queryParameters,\n        'Expected query parameters to be the same'\n      );\n    }\n  }\n\nfunction setupCurrenUrlAssert() {\n  QUnit.assert.currentUrl = {\n    equals\n  }\n}\n\n// Load on next tick becuase dummy addon doesn't load qunit until later.\n// Don't need to do this in normal apps annoyingly\nsetTimeout(setupCurrenUrlAssert, 0);"],"names":["extraUrlInfo","urlString","split","baseUrl","queryParamsString","queryParamsPairs","queryParameters","forEach","pair","key","value","equals","expectedUrl","expectedQueryParams","require","currentURL","currentUrlString","currentUrlInfo","expectedUrlInfo","QUnit","assert","equal","deepEqual","setupCurrenUrlAssert","currentUrl","setTimeout"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA;EAEA,SAASA,YAAT,CAAsBC,SAAtB,EAAiC;EAAA,yBACWA,SAAS,CAACC,KAAV,CAAgB,GAAhB,CADX;EAAA;EAAA,MACxBC,OADwB;EAAA;EAAA,MACfC,iBADe,mCACK,EADL;;EAE/B,MAAMC,gBAAgB,GAAGD,iBAAiB,CAACF,KAAlB,CAAwB,GAAxB,CAAzB;EACA,MAAMI,eAAe,GAAG,EAAxB;EACAD,EAAAA,gBAAgB,CAACE,OAAjB,CAAyB,UAACC,IAAD,EAAU;EAAA,sBACZA,IAAI,CAACN,KAAL,CAAW,GAAX,CADY;EAAA;EAAA,QAC1BO,GAD0B;EAAA,QACrBC,KADqB;;;EAGjC,QAAID,GAAJ,EAAS;EACPH,MAAAA,eAAe,CAACG,GAAD,CAAf,GAAuBC,KAAvB;EACD;EACF,GAND;EAOA,SAAO;EACLP,IAAAA,OAAO,EAAPA,OADK;EAELG,IAAAA,eAAe,EAAfA;EAFK,GAAP;EAID;;EAEC,SAASK,MAAT,CAAgBC,WAAhB,EAA6BC,mBAA7B,EAAkD;EAAA,iBACxBC,OAAO,CAAC,qBAAD,CADiB;EAAA,MACxCC,UADwC,YACxCA,UADwC;;EAEhD,MAAMC,gBAAgB,GAAGD,UAAU,EAAnC;EACA,MAAME,cAAc,GAAGjB,YAAY,CAACgB,gBAAD,CAAnC;;EACA,MAAIH,mBAAJ,EAAyB;EACvB,QAAMK,eAAe,GAAGlB,YAAY,CAACY,WAAD,CAApC;EACAO,IAAAA,KAAK,CAACC,MAAN,CAAaC,KAAb,CACEJ,cAAc,CAACd,OADjB,EAEEe,eAAe,CAACf,OAFlB,EAGE,kCAHF;EAKAgB,IAAAA,KAAK,CAACC,MAAN,CAAaE,SAAb,CACEL,cAAc,CAACX,eADjB,EAEEO,mBAFF,EAGE,0CAHF;EAKD,GAZD,MAYO;EACL,QAAMK,gBAAe,GAAGlB,YAAY,CAACY,WAAD,CAApC;;EACAO,IAAAA,KAAK,CAACC,MAAN,CAAaC,KAAb,CACEJ,cAAc,CAACd,OADjB,EAEEe,gBAAe,CAACf,OAFlB,EAGE,kCAHF;EAKAgB,IAAAA,KAAK,CAACC,MAAN,CAAaE,SAAb,CACEL,cAAc,CAACX,eADjB,EAEEY,gBAAe,CAACZ,eAFlB,EAGE,0CAHF;EAKD;EACF;;EAEH,SAASiB,oBAAT,GAAgC;EAC9BJ,EAAAA,KAAK,CAACC,MAAN,CAAaI,UAAb,GAA0B;EACxBb,IAAAA,MAAM,EAANA;EADwB,GAA1B;EAGD;EAGD;;;EACAc,UAAU,CAACF,oBAAD,EAAuB,CAAvB,CAAV;;;;"}