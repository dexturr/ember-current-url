{"version":3,"file":"qunit-current-url-dist.js","sources":["../lib/qunit-current-url.js"],"sourcesContent":["function extraUrlInfo(urlString) {\n  const [baseUrl, queryParamsString = ''] = urlString.split('?');\n  const queryParamsPairs = queryParamsString.split('&');\n  const queryParameters = {};\n  queryParamsPairs.forEach((pair) => {\n    const [key, value] = pair.split('=');\n    // If there are no QP's we don't want to push \"\": undefined\n    if (key) {\n      queryParameters[key] = value;\n    }\n  });\n  return {\n    baseUrl,\n    queryParameters,\n  };\n}\n\nfunction getUrlInfo(expectedUrl) {\n  const { currentURL }  = require('@ember/test-helpers');\n  const currentUrlString = currentURL();\n  const currentUrlInfo = extraUrlInfo(currentUrlString);\n  const expectedUrlInfo = extraUrlInfo(expectedUrl);\n  return {\n    currentUrlInfo,\n    expectedUrlInfo,\n  }\n}\n\nfunction equals(expectedUrl, expectedQueryParams) {\n  const { currentUrlInfo, expectedUrlInfo } = getUrlInfo(expectedUrl);\n  if (expectedQueryParams) {\n    QUnit.assert.equal(\n      currentUrlInfo.baseUrl,\n      expectedUrlInfo.baseUrl,\n      'Expected base URL to be the same'\n    );\n    QUnit.assert.deepEqual(\n      currentUrlInfo.queryParameters,\n      expectedQueryParams,\n      'Expected query parameters to be the same'\n    );\n  } else {\n    QUnit.assert.equal(\n      currentUrlInfo.baseUrl,\n      expectedUrlInfo.baseUrl,\n      'Expected base URL to be the same'\n    );\n    QUnit.assert.deepEqual(\n      currentUrlInfo.queryParameters,\n      expectedUrlInfo.queryParameters,\n      'Expected query parameters to be the same'\n    );\n  }\n}\n\nfunction setupCurrenUrlAssert() {\n  QUnit.assert.currentUrl = {\n    equals\n  }\n}\n\n// Load on next tick becuase dummy addon doesn't load qunit until later.\n// Don't need to do this in normal apps annoyingly\nsetTimeout(setupCurrenUrlAssert, 0);"],"names":["extraUrlInfo","urlString","split","baseUrl","queryParamsString","queryParamsPairs","queryParameters","forEach","pair","key","value","getUrlInfo","expectedUrl","require","currentURL","currentUrlString","currentUrlInfo","expectedUrlInfo","equals","expectedQueryParams","QUnit","assert","equal","deepEqual","setupCurrenUrlAssert","currentUrl","setTimeout"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA,SAASA,YAAT,CAAsBC,SAAtB,EAAiC;EAAA,yBACWA,SAAS,CAACC,KAAV,CAAgB,GAAhB,CADX;EAAA;EAAA,MACxBC,OADwB;EAAA;EAAA,MACfC,iBADe,mCACK,EADL;;EAE/B,MAAMC,gBAAgB,GAAGD,iBAAiB,CAACF,KAAlB,CAAwB,GAAxB,CAAzB;EACA,MAAMI,eAAe,GAAG,EAAxB;EACAD,EAAAA,gBAAgB,CAACE,OAAjB,CAAyB,UAACC,IAAD,EAAU;EAAA,sBACZA,IAAI,CAACN,KAAL,CAAW,GAAX,CADY;EAAA;EAAA,QAC1BO,GAD0B;EAAA,QACrBC,KADqB;;;EAGjC,QAAID,GAAJ,EAAS;EACPH,MAAAA,eAAe,CAACG,GAAD,CAAf,GAAuBC,KAAvB;EACD;EACF,GAND;EAOA,SAAO;EACLP,IAAAA,OAAO,EAAPA,OADK;EAELG,IAAAA,eAAe,EAAfA;EAFK,GAAP;EAID;;EAED,SAASK,UAAT,CAAoBC,WAApB,EAAiC;EAAA,iBACPC,OAAO,CAAC,qBAAD,CADA;EAAA,MACvBC,UADuB,YACvBA,UADuB;;EAE/B,MAAMC,gBAAgB,GAAGD,UAAU,EAAnC;EACA,MAAME,cAAc,GAAGhB,YAAY,CAACe,gBAAD,CAAnC;EACA,MAAME,eAAe,GAAGjB,YAAY,CAACY,WAAD,CAApC;EACA,SAAO;EACLI,IAAAA,cAAc,EAAdA,cADK;EAELC,IAAAA,eAAe,EAAfA;EAFK,GAAP;EAID;;EAED,SAASC,MAAT,CAAgBN,WAAhB,EAA6BO,mBAA7B,EAAkD;EAAA,oBACJR,UAAU,CAACC,WAAD,CADN;EAAA,MACxCI,cADwC,eACxCA,cADwC;EAAA,MACxBC,eADwB,eACxBA,eADwB;;EAEhD,MAAIE,mBAAJ,EAAyB;EACvBC,IAAAA,KAAK,CAACC,MAAN,CAAaC,KAAb,CACEN,cAAc,CAACb,OADjB,EAEEc,eAAe,CAACd,OAFlB,EAGE,kCAHF;EAKAiB,IAAAA,KAAK,CAACC,MAAN,CAAaE,SAAb,CACEP,cAAc,CAACV,eADjB,EAEEa,mBAFF,EAGE,0CAHF;EAKD,GAXD,MAWO;EACLC,IAAAA,KAAK,CAACC,MAAN,CAAaC,KAAb,CACEN,cAAc,CAACb,OADjB,EAEEc,eAAe,CAACd,OAFlB,EAGE,kCAHF;EAKAiB,IAAAA,KAAK,CAACC,MAAN,CAAaE,SAAb,CACEP,cAAc,CAACV,eADjB,EAEEW,eAAe,CAACX,eAFlB,EAGE,0CAHF;EAKD;EACF;;EAED,SAASkB,oBAAT,GAAgC;EAC9BJ,EAAAA,KAAK,CAACC,MAAN,CAAaI,UAAb,GAA0B;EACxBP,IAAAA,MAAM,EAANA;EADwB,GAA1B;EAGD;EAGD;;;EACAQ,UAAU,CAACF,oBAAD,EAAuB,CAAvB,CAAV;;;;"}